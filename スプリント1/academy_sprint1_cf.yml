AWSTemplateFormatVersion: "2010-09-09"
Description: "AWS traning "

Parameters:
  MyIpAddress:
    Description: "Check-> https://www.whatismyip.com/"
    Type: String
    Default: "0.0.0.0"
    AllowedPattern: "(\\d{1,3}\\.){3}\\d{1,3}"
    ConstraintDescription: "Must be a valid IP address in CIDR notation."

Resources:
# VPC
  HandsonVPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/21
      InstanceTenancy: default
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-vpc

## InternetGateway
  HandsonVPCIGW:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-igw

## InternetGateway Attachment
  HandsonVPCIGWAttach:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref HandsonVPCIGW
      VpcId: !Ref HandsonVPC

# WebSubnet
  HandsonWebSubnet01:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: 10.0.0.0/24
      VpcId: !Ref HandsonVPC
      AvailabilityZone: !Select [0, !GetAZs ]
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-web-subnet-01

# WebSubnet RouteTable
  HandsonWebSubnet01RouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref HandsonVPC
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-web-routetable
          
# WebSubnet RouteTable Route
  HandsonWebSubnet01Route:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref HandsonWebSubnet01RouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref HandsonVPCIGW 


# WebSubnet RouteTable Attachment
  HandsonWebSubnet01Assoc:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref HandsonWebSubnet01
      RouteTableId: !Ref HandsonWebSubnet01RouteTable

# ApiSubnet
  HandsonApiSubnet01:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: 10.0.1.0/24
      VpcId: !Ref HandsonVPC
      AvailabilityZone: !Select [0, !GetAZs ]
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-api-subnet-01

# ApiSubnet RouteTable
  HandsonApiSubnet01RouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref HandsonVPC
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-api-routetable
          
## ApiSubnet RouteTable Route
  HandsonApiSubnet01Route:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref HandsonApiSubnet01RouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref HandsonVPCIGW

# ApiSubnet RouteTable Attachment
  HandsonApiSubnet01Assoc:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref HandsonApiSubnet01
      RouteTableId: !Ref HandsonApiSubnet01RouteTable


  # Web SG
  SecurityGroupForWebServer:
    Type: AWS::EC2::SecurityGroup
    Properties: 
      VpcId: !Ref HandsonVPC
      GroupName: !Sub ${AWS::StackName}-web-sg
      GroupDescription: !Sub ${AWS::StackName}-web-sg
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-web-sg
      SecurityGroupIngress:
        # HTTPアクセスをMyIPから許可
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: !Sub ${MyIpAddress}/32    

  # Api SG
  SecurityGroupForApiServer:
    Type: AWS::EC2::SecurityGroup
    Properties: 
      VpcId: !Ref HandsonVPC
      GroupName: !Sub ${AWS::StackName}-api-sg
      GroupDescription: !Sub ${AWS::StackName}-api-sg
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-api-sg
      SecurityGroupIngress:
        # HTTPアクセスをMyIPから許可
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: !Sub ${MyIpAddress}/32    

# IAM Role for SSM
  HandsonIAMRole:
    Type: AWS::IAM::Role
    Properties:
      Path: /
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore
      MaxSessionDuration: 3600
      RoleName: !Sub ${AWS::StackName}-ssm-role
      Description: Allows EC2 instances to call AWS services like CloudWatch and Systems Manager on your behalf.
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: ec2.amazonaws.com

# Instance Profile for SSM
  HandsonInstanceProfile:
    Type: "AWS::IAM::InstanceProfile"
    Properties:
      Path: "/"
      InstanceProfileName: !Sub "${AWS::StackName}-ssm-role"
      Roles:
      - !Ref HandsonIAMRole

# Api EC2
  EC2ApiServer01:
    Type: AWS::EC2::Instance
    Properties:
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-api-ec2
      ImageId: ami-0c6359fd9eb30edcf
      InstanceType: t2.micro
      NetworkInterfaces: 
        - AssociatePublicIpAddress: true
          DeviceIndex: '0'
          SubnetId: !Ref HandsonApiSubnet01
          GroupSet:
            - !Ref SecurityGroupForApiServer
      UserData: !Base64 | 
        #!/bin/bash

        dnf update -y
        dnf install -y git
        dnf install -y golang

        mkdir -p /home/ssm-user/
        cd /home/ssm-user/
        git clone https://github.com/CloudTechOrg/cloudtech-reservation-api

        bash -c 'cat <<EOF > /etc/systemd/system/goserver.service
        [Unit]
        Description=Go Server

        [Service]
        WorkingDirectory=/home/ssm-user/cloudtech-reservation-api
        ExecStart=/usr/bin/go run main.go
        User=ssm-user
        Restart=on-failure
        RestartSec=5

        [Install]
        WantedBy=multi-user.target
        EOF'

        useradd -m ssm-user
        echo "ssm-user ALL=(ALL) NOPASSWD:ALL" | sudo tee /etc/sudoers.d/ssm-user

        chown -R ssm-user:ssm-user /home/ssm-user/

        systemctl daemon-reload
        systemctl enable --now goserver.service

        dnf install -y nginx
        systemctl enable --now nginx


        sudo bash -c "cat <<'EOF' > /etc/nginx/nginx.conf
        user nginx;
        worker_processes auto;
        error_log /var/log/nginx/error.log notice;
        pid /run/nginx.pid;

        include /usr/share/nginx/modules/*.conf;

        events {
            worker_connections 1024;
        }

        http {
            log_format  main  '\$remote_addr - \$remote_user [\$time_local] "\$request" '
                              '\$status \$body_bytes_sent "\$http_referer" '
                              '"\$http_user_agent" "\$http_x_forwarded_for"';

            access_log  /var/log/nginx/access.log  main;

            sendfile            on;
            tcp_nopush          on;
            keepalive_timeout   65;
            types_hash_max_size 4096;

            include             /etc/nginx/mime.types;
            default_type        application/octet-stream;

            include /etc/nginx/conf.d/*.conf;

            server {
                listen 80;
                server_name _;
                location / {
                    proxy_pass http://localhost:8080;
                    proxy_http_version 1.1;
                    proxy_set_header Upgrade \$http_upgrade;
                    proxy_set_header Connection 'upgrade';
                    proxy_set_header Host \$host;
                    proxy_cache_bypass \$http_upgrade;
                }
            }
        }
        EOF"

        systemctl restart nginx
        systemctl restart goserver.service

      IamInstanceProfile: !Ref HandsonInstanceProfile
    DependsOn: HandsonInstanceProfile

  EC2WebServer01:
    Type: AWS::EC2::Instance
    Properties:
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-web-ec2
      ImageId: ami-0c6359fd9eb30edcf
      InstanceType: t2.micro
      NetworkInterfaces: 
        - AssociatePublicIpAddress: true
          DeviceIndex: '0'
          SubnetId: !Ref HandsonWebSubnet01
          GroupSet:
            - !Ref SecurityGroupForWebServer
      UserData:
        "Fn::Base64": !Sub |
          #!/bin/bash
          dnf update -y
          dnf install -y git
          dnf install -y nginx
          systemctl enable --now nginx

          cd /usr/share/nginx/html/
          git clone https://github.com/CloudTechOrg/cloudtech-reservation-web

          sed -i 's|root         /usr/share/nginx/html;|root         /usr/share/nginx/html/cloudtech-reservation-web;|' "/etc/nginx/nginx.conf"

          # config.jsを編集
          sudo bash -c "cat <<EOF > /usr/share/nginx/html/cloudtech-reservation-web/config.js
          const apiConfig = {
            baseURL: 'http://${EC2ApiServer01.PublicIp}'
          };
          EOF"

          # Nginxの再起動
          systemctl restart nginx
      IamInstanceProfile: !Ref HandsonInstanceProfile

    DependsOn: EC2ApiServer01

Outputs:
  WebServer:
    Value: !Join ["",['http://',!GetAtt EC2WebServer01.PublicIp]]
  ApiServer:
    Value: !Join ["",['http://',!GetAtt EC2ApiServer01.PublicIp]]
